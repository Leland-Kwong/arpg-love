local memoize = require("utils.memoize")
local perf = require("utils.perf")

local function test()
  local callCount = 0
  local mockFunc = function(a, b)
    callCount = callCount + 1
    return a + b
  end
  local func = memoize(mockFunc, {
    resolver = function(lastArgs, a, b)
      return a ~= lastArgs[1] or b ~= lastArgs[2]
    end
  })

  local ret = func(1, 2)
  func(1, 2)
  assert(callCount == 1, "should only be called once")
  assert(ret == 3, "incorrect return value")
end

local function perfTest()
  local func = memoize(function(a, b)
    return a + b
  end, {
    resolver = function(lastArgs, a)
      return a ~= lastArgs[1]
    end
  })
  local iterCount = 1000
  perf(
    function()
      for i=1, iterCount do
        func(1, 2)
      end
    end, {
      enabled = false,
      done = function(timeTaken)
        print(timeTaken, "(average)")
      end
    }
  )()
end

function init()
  test()
  perfTest()
end

function on_reload()
  test()
  perfTest()
end