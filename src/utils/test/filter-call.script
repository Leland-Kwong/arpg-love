local perf = require('utils.perf')
local filterCall = require("utils.filter-call")

local function measureFilterCallOverhead()
	--[[ setup start ]]
	local keys = {
		'foo',
		'bar'
	}
	local filters = {
		foo = true
	}
	local callback = filterCall(function(k,v)
		return k
	end, function(k)
		return filters[k]
	end)
	math.randomseed(socket.gettime())
	local keysToIterateWith = {}
	local callbacks = {}
	local iterCount = 1000
	for i=1, iterCount do
		local index = math.random(1,2)
		keysToIterateWith[#keysToIterateWith + 1] = keys[index]
		table.insert(callbacks, callback)
	end
	--[[ setup end ]]

	--[[ benchmark ]]
	local executionTime = nil
	perf(function()
		for i=1, iterCount do
			local key = keysToIterateWith[i]
			local callback = callbacks[i]
			callback(key, i)
		end
	end, {
		done = function(timeTaken)
			executionTime = timeTaken
		end
	})()
	return executionTime
end

local function test()
	local totalTime = 0
	local count = 100
	for i=1, count do
		totalTime = totalTime + measureFilterCallOverhead()
	end
	local averageTime = totalTime / count
	-- print('[filterCall] '..string.sub(averageTime, 1, 6)..'(ms) (avg. time)')
end

function init(self)
	test()
end

function on_reload(self)
	test()
end
